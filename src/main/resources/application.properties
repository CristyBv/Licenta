spring.data.cassandra.clusterName=Licence Project
spring.data.cassandra.keyspaceName=cristybv_admin
spring.data.cassandra.port=9042
spring.data.cassandra.contactPoints=127.0.0.1
spring.data.cassandra.schemaAction=create_if_not_exists
spring.data.cassandra.username=cristybv
spring.data.cassandra.password=exp112

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=cristybv112@gmail.com
spring.mail.password=experimental112
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.test-connection=true

app.domain.name = http://localhost:8080

register.mail.token.expiry_hours = 12

route.index = /index
route.confirmation = /confirmation
route.register = /register
route.recovery = /recovery
route.login = /login
route.logout = /logout
route.change[email] = /change-email
route.change[password] = /change-password
route.profile = /profile
route.change[avatar] = /change-avatar
route.myDatabase = /my-database
route.keyspace[create] = /create-keyspace
route.keyspace[edit] = /edit-keyspace
route.keyspace[connect] = /connect-keyspace
route.keyspace[disconnect] = /disconnect-keyspace
route.change[databasePanel] = /change-database-panel
route.keyspace[addUser] = /add-user-to-keyspace
route.keyspace[removeUser] = /remove-user-from-keyspace
route.searchLive[user] = /search-user-live
route.searchLive[table] = /search-table-live
route.searchLive[column] = /search-column-live
route.searchLive[function] = /search-function-live
route.delete[keyspace] = /delete-keyspace
route.change[keyspacePassword] = /change-keyspace-password
route.change[myKeyspacesPanel] = /change-my-keyspaces-panel
route.change[databaseViewEditPanel] = /change-database-view-edit-panel
route.get[databaseContent] = /get-database-content
route.get[tableStructure] = /get-table-structure
route.get[tableData] = /get-table-data
route.updateDeleteRowContent = /update-delete-row-content
route.insert[row] = /insert-row
route.alter[table] = /alter-table
route.drop[table] = /drop-table
route.create[table] = /create-table
route.create[index] = /create-index
route.create[view] = /create-view
route.drop[index] = /drop-index
route.create[type] = /create-type
route.create[trigger] = /create-trigger
route.alter[type] = /alter-type
route.drop[type] = /drop-type
route.drop[view] = /drop-view
route.create[function] = /create-function
route.create[aggregate] = /create-aggregate
route.drop[function] = /drop-function
route.drop[aggregate] = /drop-aggregate
route.drop[trigger] = /drop-trigger
route.console[interpretor] = /console-interpretor
route.console[content] = /console-content
route.console[active] = /console-active
route.script[interpretor] = /script-interpretor
route.script[content] = /script-content
route.script[active] = /script-active

query.selectUser[by_email] = SELECT %s FROM cristybv_admin.users_by_email where email = '%s'
query.selectUser[by_username] = SELECT %s FROM cristybv_admin.users_by_username where username = '%s'
query.selectUser[by_register_token] = SELECT %s FROM cristybv_admin.users_by_register_token where register_token = '%s'

query.selectKeyspace[by_name] = SELECT %s FROM cristybv_admin.keyspaces_by_name where name = '%s'
query.selectKeyspace[tables] = SELECT %s FROM system_schema.tables WHERE keyspace_name = '%s'
query.selectKeyspace[tableColumns] = SELECT %s FROM system_schema.columns WHERE keyspace_name = '%s' AND table_name = '%s'
query.selectKeyspace[tableDroppedColumns] = SELECT %s FROM system_schema.dropped_columns WHERE keyspace_name = '%s' AND table_name = '%s'
query.selectKeyspace[types] =  SELECT %s FROM system_schema.types WHERE keyspace_name = '%s'
query.selectKeyspace[tableIndexes] =  SELECT %s FROM system_schema.indexes WHERE keyspace_name = '%s' AND table_name = '%s'
query.selectKeyspace[views] =  SELECT %s FROM system_schema.views WHERE keyspace_name = '%s'
query.selectKeyspace[aggregates] =  SELECT %s FROM system_schema.aggregates WHERE keyspace_name = '%s'
query.selectKeyspace[tableTriggers] =  SELECT %s FROM system_schema.triggers WHERE keyspace_name = '%s' AND table_name = '%s'
query.selectKeyspace[functions] =  SELECT %s FROM system_schema.functions WHERE keyspace_name = '%s'

query.select[simple] = SELECT %s FROM %s
query.select[where] = SELECT %s FROM %s WHERE %s
query.update = update %s %s SET %s WHERE %s
query.delete = delete %s FROM %s %s WHERE %s
query.insert = INSERT INTO %s (%s) VALUES (%s) %s
query.alter[options] = ALTER TABLE %s WITH %s
query.alter[column_name] = ALTER TABLE %s RENAME %s TO %s
query.alter[column_type] = ALTER TABLE %s ALTER %s TYPE %s
query.alter[drop_column] = ALTER TABLE %s DROP %s
query.alter[add_column] = ALTER TABLE %s ADD (%s)
query.alter[view] = ALTER MATERIALIZED VIEW %s WITH %s
query.drop[table] = DROP TABLE %s
query.drop[index] = DROP INDEX %s
query.drop[type] = DROP TYPE %s
query.drop[view] = DROP MATERIALIZED VIEW %s
query.drop[function] = DROP FUNCTION %s
query.drop[aggregate] = DROP AGGREGATE %s
query.drop[trigger] = DROP TRIGGER %s ON %s
query.create[table] = CREATE TABLE %s (%s, PRIMARY KEY (%s))
query.create[table_clustering] = CREATE TABLE %s (%s, PRIMARY KEY (%s)) WITH CLUSTERING ORDER BY (%s)
query.create[view] = CREATE MATERIALIZED VIEW %s AS SELECT %s FROM %s WHERE %s PRIMARY KEY (%s)
query.create[view_clustering] = CREATE MATERIALIZED VIEW %s AS SELECT %s FROM %s WHERE %s PRIMARY KEY (%s) WITH CLUSTERING ORDER BY (%s)
query.create[index] = CREATE INDEX %s ON %s (%s)
query.create[custom_index] = CREATE CUSTOM INDEX %s ON %s (%s) USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = {%s}
query.create[function] = CREATE %s FUNCTION %s (%s) %s ON NULL INPUT RETURNS %s LANGUAGE %s AS %s
query.create[type] = CREATE TYPE %s (%s)
query.create[aggregate] = CREATE %s AGGREGATE %s (%s) SFUNC %s STYPE %s INITCOND %s
query.create[aggregate_finalfunc] = CREATE %s AGGREGATE %s (%s) SFUNC %s STYPE %s FINALFUNC %s INITCOND %s
query.create[trigger] = CREATE TRIGGER %s ON %s USING %s
query.alter[type_rename] = ALTER TYPE %s RENAME %s
query.alter[type_add_field] = ALTER TYPE %s ADD %s

query.createKeyspace = CREATE KEYSPACE IF NOT EXISTS %s WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : %d } AND DURABLE_WRITES = %s
query.alterKeyspace = ALTER KEYSPACE %s WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : %d } AND DURABLE_WRITES = %s
query.dropKeyspace = DROP KEYSPACE IF EXISTS %s
query.selectUserByPartialUsername = SELECT %s FROM cristybv_admin.users WHERE username LIKE '%s'

query.selectKeyspaces = SELECT %s FROM system_schema.keyspaces

query.syntax[truncate] = TRUNCATE [TABLE] table_name
query.syntax[select] = SELECT * | select_expression | DISTINCT partition \n\
FROM table_name \n\
[WHERE partition_value \n\
[AND clustering_filters \n\
[AND static_filters]]] \n\
[ORDER BY PK_column_name ASC|DESC] \n\
[LIMIT N] \n\
[ALLOW FILTERING]
query.syntax[delete] = DELETE [column_name (term)][, ...]\n\
FROM table_name \n\
[USING TIMESTAMP timestamp_value] \n\
WHERE PK_column_conditions \n\
[IF EXISTS | IF static_column_conditions]
query.syntax[update] = UPDATE table_name \n\
[USING TTL time_value | USING TIMESTAMP timestamp_value] \n\
SET assignment [, assignment] . . . \n\
WHERE row_specification \n\
[IF EXISTS | IF condition [AND condition] . . .] ;
query.syntax[insert] = INSERT INTO table_name (column_list) \n\
VALUES (column_values) \n\
[IF NOT EXISTS] \n\
[USING TTL seconds | TIMESTAMP epoch_in_microseconds]
query.syntax[alterType] = ALTER TYPE field_name \n\
[ALTER field_name TYPE new_cql_datatype \n\
| ADD (field_name cql_datatype[,...]) \n\
| RENAME field_name TO new_field_name[AND ...]]
query.syntax[alterTable] = ALTER TABLE table_name \n\
[ALTER column_name TYPE cql_type] \n\
[ADD (column_definition_list)] \n\
[DROP column_list | COMPACT STORAGE ] \n\
[RENAME column_name TO column_name] \n\
[WITH table_properties];
query.syntax[alterMaterializedView] = ALTER MATERIALIZED VIEW view_name \n\
[WITH table_options]
query.syntax[dropTable] = DROP TABLE [IF EXISTS] table_name
query.syntax[dropType] = DROP TYPE [IF EXISTS] type_name
query.syntax[dropAggregate] = DROP AGGREGATE [IF EXISTS] aggregate_name
query.syntax[dropFunction] = DROP FUNCTION [IF EXISTS] function_name
query.syntax[dropIndex] = DROP INDEX [IF EXISTS] index_name
query.syntax[dropTrigger] = DROP TRIGGER [IF EXISTS] trigger_name ON table_name;
query.syntax[dropMaterializedView] = DROP MATERIALIZED VIEW [IF EXISTS] view_name
query.syntax[createType] = CREATE TYPE [IF NOT EXISTS] \n\
keyspace_name.type_name( \n\
field_name cql_datatype[,] \n\
[field_name cql_datatype] [,...])
query.syntax[createTable] = CREATE TABLE [IF NOT EXISTS] table_name ( \n\
column_definition [, ...] \n\
PRIMARY KEY (column_name [, column_name ...])\n\
[WITH table_options \n\
| CLUSTERING ORDER BY (clustering_column_name order]) \n\
| ID = 'table_hash_tag' \n\
| COMPACT STORAGE] \n\
query.syntax[createType] = s
query.syntax[createAggregate] = CREATE [OR REPLACE] AGGREGATE [IF NOT EXISTS] \n\
aggregate_name ( cql_type ) \n\
SFUNC udf_name \n\
STYPE cql_type \n\
FINALFUNC udf_name \n\
INITCOND [value]
query.syntax[createFunction] = CREATE [OR REPLACE] FUNCTION [IF NOT EXISTS] \n\
function_name ( \n\
var_name var_type [,...] ) \n\
[CALLED | RETURNS NULL] ON NULL INPUT \n\
RETURNS cql_data_type \n\
LANGUAGE language_name AS \n\
'code_block'; \n\
query.syntax[createIndex] = CREATE INDEX IF NOT EXISTS index_name \n\
ON keyspace_name.table_name ( KEYS ( column_name ) )
query.syntax[createTrigger] = CREATE TRIGGER [IF NOT EXISTS] trigger_name ON table_name \n\
USING 'java_class'
query.syntax[createMaterializedView] = CREATE MATERIALIZED VIEW [IF NOT EXISTS] view_name \n\
AS SELECT column_list \n\
FROM base_table_name \n\
WHERE column_name IS NOT NULL [AND column_name IS NOT NULL ...] \n\
[AND relation...] \n\
PRIMARY KEY ( column_list ) \n\
[WITH [table_properties] \n\
[AND CLUSTERING ORDER BY (cluster_column_name order_option )]]
query.syntax[batch] = BEGIN [UNLOGGED | LOGGED] BATCH \n\
[USING TIMESTAMP [epoch_microseconds]] \n\
dml_statement [USING TIMESTAMP [epoch_microseconds]]; \n\
[dml_statement; ...] \n\
APPLY BATCH;


user.avatar.maxLength = 200

keyspace.creator = FULL
keyspace.admin = ADMIN
keyspace.editor = EDITOR
keyspace.member = MEMBER
keyspace.panel[manage] = ManagePanel
keyspace.panel[viewEdit] = ViewEditPanel
keyspace.panel[consoleScript] = ConsoleScriptPanel
keyspace.panel[importExport] = ImportExportPanel
keyspace.panel[log] = LogPanel
keyspace.panel[search] = SearchPanel
keyspace.panel[tables] = TablesPanel
keyspace.panel[columns] = ColumnsPanel
keyspace.panel[droppedColumns] = DroppedColumnsPanel
keyspace.panel[indexes] = IndexesPanel
keyspace.panel[types] = TypesPanel
keyspace.panel[views] = ViewsPanel
keyspace.panel[functions] = FunctionsPanel
keyspace.panel[aggregates] = AggregatesPanel
keyspace.panel[triggers] = TriggersPanel

database.triggers = trigger1;trigger2;trigger3